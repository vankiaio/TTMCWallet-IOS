const Blockchains={TTMC:'ttmc',ETH:'eth',TRX:'trx'};class Network{constructor(_name='',_protocol='https',_host='',_port=0,blockchain=Blockchains.TTMC,chainId=''){this.name=_name;this.protocol=_protocol;this.host=_host;this.port=_port;this.blockchain=blockchain;this.chainId=chainId.toString()}static placeholder(){return new Network()}static fromJson(json){const p=Object.assign(Network.placeholder(),json);p.chainId=p.chainId?p.chainId.toString():'';return p}isValid(){return(this.protocol.length&&this.host.length&&this.port)||this.chainId.length};hostport(){return`${this.host}${this.port?':':''}${this.port}`}}const BLOCKCHAIN_SUPPORT='blockchain_support';class Plugin{constructor(_name='',_type=''){this.name=_name;this.type=_type}static placeholder(){return new Plugin()}static fromJson(json){return Object.assign(Plugin.placeholder(),json)}isSignatureProvider(){return this.type===BLOCKCHAIN_SUPPORT}}class PluginRepositorySingleton{constructor(){this.plugins=[]}loadPlugin(plugin){if(!this.plugin(plugin.name))this.plugins.push(plugin)}signatureProviders(){return this.plugins.filter(plugin=>plugin.type===BLOCKCHAIN_SUPPORT)}supportedBlockchains(){return this.signatureProviders().map(plugin=>name)}plugin(name){return this.plugins.find(plugin=>plugin.name===name)}async endorsedNetworks(){return await Promise.all(this.signatureProviders().map(async plugin=>await plugin.getEndorsedNetwork()))}}const PluginRepository=new PluginRepositorySingleton();const throwNoAuth=()=>{};const checkForExtension=(resolve,tries=0)=>{if(tries>20)return;if(window.scatter.isExtension)return resolve(true);setTimeout(()=>checkForExtension(resolve,tries+1),100)};class IdentityPE{constructor(){this.hash='1df7bb65ad53a9eb89b4327a56b1200f3abaf085ffec00af222b9eb7622b0734';this.publicKey='TTMC8NJX2UzUFvbAYH7y1KoZpAAP3zjincBaZnDsuvjQQ4VD1KRLeG';this.name='yoyocould';this.accounts=[{name:'ttmcchain4',authority:'active',blockchain:'ttmc'}];this.kyc=false}}class Index{constructor(){alert('new index');this.isExtension=true;this.identity=null}loadPlugin(plugin){const noIdFunc=()=>{if(!this.identity)throw new Error('No Identity')};PluginRepository.loadPlugin(plugin);if(plugin.isSignatureProvider()){this[plugin.name]=plugin.signatureProvider(noIdFunc);this[plugin.name+'Hook']=plugin.hookProvider}}async isInstalled(){return new Promise(resolve=>{setTimeout(()=>{resolve(false)},3000);Promise.race([checkForExtension(resolve)])})}async connect(pluginName,options){return new Promise(resolve=>{if(!pluginName||!pluginName.length)throw new Error('You must specify a name for this connection');options=Object.assign({initTimeout:10000,linkTimeout:30000},options);setTimeout(()=>{resolve(false)},options.initTimeout);checkForExtension(resolve)})}disconnect(){alert('from pe disconnect')}getIdentity(requiredFields){alert('from pe getIdentity');throwNoAuth();return new Promise((resolve,reject)=>{const ids=new IdentityPE();this.identity=ids;resolve(ids)})}getIdentityFromPermissions(){alert('from pe getIdentityFromPermissions');throwNoAuth();return new Promise((resolve,reject)=>{const ids=new IdentityPE();this.identity=ids;resolve(ids)})}forgetIdentity(){alert('from pe forgetIdentity');throwNoAuth();return new Promise((resolve,reject)=>{const ids=new IdentityPE();this.identity=ids;resolve(ids)})}authenticate(nonce){alert('from pe authenticate');throwNoAuth();return new Promise((resolve,reject)=>{const ids=new IdentityPE();this.identity=ids;resolve(ids)})}getArbitrarySignature(publicKey,data,whatfor='',isHash=false){alert('from pe getArbitrarySignature');throwNoAuth();return 0}getPublicKey(blockchain){alert('from pe getPublicKey');throwNoAuth();return 0}linkAccount(publicKey,network){alert('from pe linkAccount');throwNoAuth();return 0}hasAccountFor(network){alert('from pe hasAccountFor');throwNoAuth();return 0}suggestNetwork(network){alert('from pe suggestNetwork');throwNoAuth();return 0}requestTransfer(network,to,amount,options={}){alert('from pe requestTransfer');const payload={network,to,amount,options};return 0}requestSignature(payload){alert('from pe requestSignature');throwNoAuth();return 0}createTransaction(blockchain,actions,account,network){throwNoAuth();alert('from pe createTransaction');return 0}}const proxy=(dummy,handler)=>new Proxy(dummy,handler);let cache={};class ScatterTTMC extends Plugin{constructor(){super(Blockchains.TTMC,BLOCKCHAIN_SUPPORT)}hookProvider(network){return signargs=>{return new Promise(resolve=>{console.log('signargs',JSON.stringify(signargs));alert('pe requestSignature')})}}signatureProvider(...args){const throwIfNoIdentity=args[0];return(network,_ttmc,_options={})=>{network=Network.fromJson(network);if(!network.isValid()){throw Error.noNetwork();alert('network error')};const httpEndpoint=`${network.protocol}`+'://'+`${network.hostport()}`;alert(network.hostport);const chainId=network.hasOwnProperty('chainId')&&network.chainId.length?network.chainId:_options.chainId;return proxy(_ttmc({httpEndpoint,chainId}),{get(ttmcInstance,method){let returnedFields=null;return(...args)=>{if(args.find(arg=>arg.hasOwnProperty('keyProvider')))throw Error.usedKeyProvider();const signProvider=async signargs=>{console.log('signargs',JSON.stringify(signargs));throwIfNoIdentity();const requiredFields=args.find(arg=>arg.hasOwnProperty('requiredFields'))||{requiredFields:{}};alert('pe requestSignature');const result='';if(!result)return null;if(result.hasOwnProperty('signatures')){returnedFields=result.returnedFields;let multiSigKeyProvider=args.find(arg=>arg.hasOwnProperty('signProvider'));if(multiSigKeyProvider){result.signatures.push(multiSigKeyProvider.signProvider(signargs.buf,signargs.sign))}return result.signatures}return result};return new Promise((resolve,reject)=>{const getOrCache=()=>{const unique=JSON.stringify(Object.assign(_options,{httpEndpoint,chainId}));if(!cache.hasOwnProperty(unique))cache[unique]=_ttmc(Object.assign(_options,{httpEndpoint,signProvider,chainId}));return cache[unique]};let ttmc=getOrCache();getOrCache()[method](...args).then(result=>{if(!result.hasOwnProperty('fc')){result=Object.assign(result,{returnedFields});resolve(result);return}const contractProxy=proxy(result,{get(instance,method){if(method==='then')return instance[method];return(...args)=>{return new Promise(async(res,rej)=>{instance[method](...args).then(actionResult=>{res(Object.assign(actionResult,{returnedFields}))}).catch(rej)})}}});resolve(contractProxy)}).catch(error=>reject(error))})}}})}}}function inject(){alert('pe js');window.scatter=new Index();console.log(window.scatter);window.scatter.loadPlugin(new ScatterTTMC());document.dispatchEvent(new CustomEvent('scatterLoaded'));console.log(window.scatter)}inject();";document.getElementsByTagName('head')[0].appendChild(script);

